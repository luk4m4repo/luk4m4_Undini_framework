"""
Static Mesh Import Script for Unreal Engine
-----------------------------------------

This script is the seventh step in the Undini procedural generation pipeline:
1. Export splines from Unreal Engine (000_export_splines_as_json.py)
2. Export GenZone meshes from UE (010_export_gz_to_mod.py)
3. Process building data in Houdini (100_headless_topnet_PCGHD.py)
4. Import CSV files back into Unreal Engine (110_reimport_datatable.py)
5. Create PCG graphs in Unreal Engine (120_create_pcg_graph.py)
6. Generate sidewalks and roads in Houdini (200_headless_topnet_SWR.py)
7. Import sidewalk and road meshes into Unreal Engine (this script)

This script handles importing or reimporting FBX files as static meshes into Unreal Engine.
It's primarily used for importing the sidewalks and roads generated by the Houdini script,
but can be used for any FBX files that need to be imported as static meshes.

The script is designed to be robust across different versions of Unreal Engine,
with multiple fallback methods for importing assets when the primary method fails.

Usage:
    From Python in Unreal Engine:
    ```python
    import reimport_folder_static_meshes
    reimport_folder_static_meshes(iteration_number=5, fbx_dir="path/to/fbx/files")
    ```

    Or run directly:
    ```
    python 210_reimport_SM.py
    ```
"""

import unreal
import os

# Define the workspace root relative to this script
WORKSPACE_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))

# FBX import settings that work well with Unreal Engine 5.3.2
FBX_IMPORT_SETTINGS = {
    # General import task settings
    "automated": True,
    "save": True,
    "replace_existing": True,
    
    # Basic factory options that are known to work in UE 5.3.2
    "factory_options": {
        "auto_generate_collision": True,  # Generate collision
        "import_materials": True,         # Import materials
        "import_textures": True          # Import textures
    }
}

def reimport_folder_static_meshes(iteration_number=None, fbx_dir=None):
    """
    Imports or reimports static meshes from FBX files into Unreal Engine.
    
    This function will scan the provided directory for FBX files, and then:
    1. For each FBX file, check if it already exists in Unreal Engine
    2. If it exists, update the existing mesh
    3. If it doesn't exist, import it as a new mesh
    
    The function uses multiple import methods with fallbacks to ensure compatibility
    across different Unreal Engine versions.
    
    Args:
        iteration_number (int, optional): The iteration number for file naming. Defaults to 0.
        fbx_dir (str, optional): Directory containing the FBX files to import. 
                               Defaults to sidewalks & roads output directory.
    
    Returns:
        int: Number of successfully processed meshes
    """
    unreal.log("üîç Looking for static meshes to import or update...")
    
    # Set default values if not provided
    if iteration_number is None:
        iteration_number = 0
        unreal.log(f"‚ÑπÔ∏è No iteration number provided, using default: {iteration_number}")
    else:
        unreal.log(f"‚ÑπÔ∏è Using iteration number: {iteration_number}")
    
    # Determine the FBX directory
    if fbx_dir is None:
        fbx_dir = os.path.join(WORKSPACE_ROOT, "03_GenDatas", "Dependancies", "SW_Roads", "Out", "Mod")
        unreal.log(f"‚ÑπÔ∏è No FBX directory provided, using default: {fbx_dir}")
    else:
        unreal.log(f"‚ÑπÔ∏è Using custom FBX directory: {fbx_dir}")
    
    # Check if the directory exists
    if not os.path.exists(fbx_dir):
        unreal.log_error(f"‚ùå FBX directory not found: {fbx_dir}")
        unreal.log_warning("‚ö†Ô∏è Please make sure the Houdini sidewalks & roads generation script has been run first.")
        return 0
    
    # Define what we're importing - sidewalks and roads meshes for this iteration
    import_configs = []
    
    # Look for FBX files that match the iteration number
    unreal.log(f"\nüìÇ Scanning directory for FBX files matching iteration {iteration_number}: {fbx_dir}")
    try:
        # Get all FBX files in the directory
        all_fbx_files = [f for f in os.listdir(fbx_dir) if f.endswith('.fbx')]
        
        # Filter for files that match the expected naming patterns for this iteration
        # The Houdini script generates files named road_{iteration_number}.fbx and sidewalks_{iteration_number}.fbx
        expected_patterns = [f"road_{iteration_number}.fbx", f"sidewalks_{iteration_number}.fbx"]
        fbx_files = [f for f in all_fbx_files if f in expected_patterns]
        
        if fbx_files:
            unreal.log(f"‚úÖ Found {len(fbx_files)} FBX files matching iteration {iteration_number}!")
            for fbx_file in fbx_files:
                unreal.log(f"  ‚Ä¢ {fbx_file}")
        else:
            # If no matching files, provide a helpful message
            unreal.log_warning(f"‚ö†Ô∏è No FBX files matching iteration {iteration_number} found in directory: {fbx_dir}")
            if all_fbx_files:
                unreal.log_warning(f"‚ÑπÔ∏è Found {len(all_fbx_files)} FBX files with other iteration numbers:")
                for fbx_file in all_fbx_files[:5]:  # Show up to 5 examples
                    unreal.log_warning(f"  ‚Ä¢ {fbx_file}")
                if len(all_fbx_files) > 5:
                    unreal.log_warning(f"  ... and {len(all_fbx_files) - 5} more")
                unreal.log_warning(f"‚ÑπÔ∏è Make sure to run the Houdini script with iteration number {iteration_number}")
            else:
                unreal.log_warning("‚ö†Ô∏è No FBX files found at all. Please run the Houdini sidewalks & roads generation script first")
            return 0
    except Exception as e:
        unreal.log_error(f"‚ùå Error scanning directory: {str(e)}")
        return 0
    
    # Process each FBX file and create import configurations
    unreal.log("\nüìù Preparing import configurations...")
    for fbx_file in fbx_files:
        # Extract the base name without extension
        base_name = os.path.splitext(fbx_file)[0]
        
        # Create a config for each FBX file
        source_file = os.path.join(fbx_dir, fbx_file)
        folder_path = f"/Game/luk4m4_Undini/Assets/{base_name}"
        
        import_configs.append({
            "source_file": source_file,
            "folder_path": folder_path,
            "asset_name": base_name,
            "name_filter": base_name
        })
        unreal.log(f"  ‚Ä¢ Will import: {fbx_file} to {folder_path}")
        
    if not import_configs:
        unreal.log_warning(f"‚ö†Ô∏è No valid FBX files to import")
        unreal.log_warning("‚ö†Ô∏è Please check that the files exist and are valid FBX files")
        return 0
    
    unreal.log(f"‚úÖ Prepared {len(import_configs)} files for import/update")

    
    # Get references to necessary libraries
    unreal.log("\nüîë Accessing Unreal Engine asset management tools...")
    editor_lib = unreal.EditorAssetLibrary
    asset_tools = unreal.AssetToolsHelpers.get_asset_tools()
    editor_asset_subsystem = unreal.get_editor_subsystem(unreal.EditorAssetSubsystem)
    
    # Keep track of what we've processed
    total_processed = 0
    total_success = 0
    
    # Process each import configuration
    unreal.log("\nüìä Starting import/update process...")
    for config in import_configs:
        source_file = config["source_file"]
        folder_path = config["folder_path"]
        asset_name = config["asset_name"]
        name_filter = config.get("name_filter", "")
        
        # Make sure the source file exists
        if not os.path.exists(source_file):
            unreal.log_warning(f"‚ö†Ô∏è Hmm, can't find the source file: {source_file}")
            unreal.log_warning(f"  Did you generate it first? Skipping this file.")
            continue
        
        unreal.log(f"\nüéü Processing: {asset_name}")
        unreal.log(f"  Source: {source_file}")
        unreal.log(f"  Destination: {folder_path}")
        
        # Create the destination folder if needed
        if not editor_lib.does_directory_exist(folder_path):
            unreal.log(f"üìÇ Creating folder: {folder_path}")
            editor_lib.make_directory(folder_path)
            unreal.log(f"‚úÖ Folder created successfully")
        
        # Look for existing static meshes that match our filter
        unreal.log(f"üîç Checking for existing meshes in {folder_path}...")
        assets = editor_lib.list_assets(folder_path, recursive=True, include_folder=False)
        existing_meshes = []
        
        # Find static meshes that match our filter
        for asset_path in assets:
            try:
                if name_filter and name_filter.lower() not in asset_path.lower():
                    continue
                    
                asset = editor_lib.load_asset(asset_path)
                if asset and isinstance(asset, unreal.StaticMesh):
                    existing_meshes.append(asset_path)
            except Exception as e:
                unreal.log_warning(f"‚ö†Ô∏è Trouble checking asset {asset_path}: {str(e)}")
        
        if existing_meshes:
            unreal.log(f"‚úÖ Found {len(existing_meshes)} existing meshes to update")
            
            # Update existing meshes
            for asset_path in existing_meshes:
                try:
                    mesh_name = os.path.basename(asset_path)
                    unreal.log(f"üîÑ Updating: {mesh_name}")
                    
                    # Try to reimport using the asset registry
                    asset = editor_lib.load_asset(asset_path)
                    if asset:
                        # Create a reimport task
                        task = unreal.AssetImportTask()
                        task.filename = source_file
                        task.destination_path = os.path.dirname(asset_path)
                        task.destination_name = os.path.basename(asset_path).split(".")[0]
                        task.replace_existing = True
                        task.automated = True
                        task.save = True
                        
                        # Do the reimport
                        unreal.log("  Reimporting using AssetTools...")
                        result = asset_tools.import_asset_tasks([task])
                        
                        if result and len(result) > 0:
                            unreal.log(f"‚úÖ Successfully updated: {mesh_name}")
                            total_success += 1
                        else:
                            unreal.log(f"‚ÑπÔ∏è Update process completed - check Content Browser")
                            total_success += 1
                    
                    total_processed += 1
                except Exception as e:
                    unreal.log_error(f"‚ùå Couldn't update {mesh_name}: {str(e)}")
                    total_processed += 1
        else:
            unreal.log(f"‚ÑπÔ∏è No existing meshes found in {folder_path}")
            unreal.log(f"  Will create new meshes instead")

            unreal.log(f"üåü Creating new meshes from: {source_file}")
            
            # Try to import new meshes - we'll try multiple methods if necessary
            try:
                unreal.log("\nüõ† Method 1: Using AssetImportTask with FbxFactory...")
                # Create an import task
                task = unreal.AssetImportTask()
                task.filename = source_file
                task.destination_path = folder_path
                task.destination_name = asset_name
                task.replace_existing = True
                task.automated = True
                task.save = True
                
                # Create a factory with the right settings
                factory = unreal.FbxFactory()
                
                # Try different approaches to set the properties based on UE version
                unreal.log("  Configuring FBX import settings...")
                try:
                    # Try using set_editor_property (newer UE versions)
                    factory.set_editor_property('ImportMaterials', True)
                    factory.set_editor_property('ImportTextures', True)
                    unreal.log("  ‚úÖ Using set_editor_property for factory configuration")
                except Exception as prop_e:
                    unreal.log_warning(f"  ‚ö†Ô∏è Could not set properties using set_editor_property: {str(prop_e)}")
                    
                    # Try direct property access as a fallback (older UE versions)
                    try:
                        # Different UE versions might use different property names
                        if hasattr(factory, 'ImportMaterials'):
                            factory.ImportMaterials = True
                            factory.ImportTextures = True
                            unreal.log("  ‚úÖ Using ImportMaterials property (capital letters)")
                        elif hasattr(factory, 'import_materials'):
                            factory.import_materials = True
                            factory.import_textures = True
                            unreal.log("  ‚úÖ Using import_materials property (lowercase)")
                    except Exception as attr_e:
                        unreal.log_warning(f"  ‚ö†Ô∏è Could not set properties directly: {str(attr_e)}")
                        unreal.log_warning("  ‚ö†Ô∏è Will proceed with default factory settings")
                
                # Assign the factory to the task
                task.factory = factory
                
                # Do the import
                unreal.log("  Starting import with asset tools...")
                result = asset_tools.import_asset_tasks([task])
                
                if result and len(result) > 0:
                    unreal.log("  ‚úÖ Successfully imported new meshes!")
                    
                    # Count how many new meshes we got
                    unreal.log("  Counting newly created mesh assets...")
                    new_assets = editor_lib.list_assets(folder_path, recursive=True, include_folder=False)
                    new_meshes = []
                    
                    for asset_path in new_assets:
                        try:
                            if name_filter and name_filter.lower() not in asset_path.lower():
                                continue
                                
                            asset = editor_lib.load_asset(asset_path)
                            if asset and isinstance(asset, unreal.StaticMesh):
                                new_meshes.append(asset_path)
                        except Exception:
                            pass
                    
                    new_count = len(new_meshes)
                    unreal.log(f"  üìä Found {new_count} new mesh assets")
                    for mesh_path in new_meshes:
                        unreal.log(f"    ‚Ä¢ {os.path.basename(mesh_path)}")
                    total_success += new_count
                    total_processed += new_count
                else:
                    # Primary method didn't work, we'll try alternatives
                    unreal.log("  ‚ö†Ô∏è First method didn't succeed, trying alternatives...")

                    # Method 2: Try using the editor subsystem
                    unreal.log("\nüõ† Method 2: Using EditorAssetSubsystem...")
                    try:
                        full_path = f"{folder_path}/{asset_name}"
                        unreal.log(f"  Trying to import to: {full_path}")
                        
                        # Import using the editor subsystem if available
                        if hasattr(editor_asset_subsystem, 'import_asset'):
                            unreal.log("  Found import_asset method, attempting import...")
                            result = editor_asset_subsystem.import_asset(source_file, full_path)
                            
                            if result:
                                unreal.log("  ‚úÖ Successfully imported using editor subsystem!")
                                total_success += 1
                                continue
                            else:
                                unreal.log_warning(f"  ‚ö†Ô∏è Editor subsystem import failed for {asset_name}")
                        else:
                            unreal.log_warning("  ‚ö†Ô∏è Editor subsystem doesn't have import_asset method - your UE version might be older")
                    except Exception as subsys_e:
                        unreal.log_warning(f"  ‚ö†Ô∏è Editor subsystem import error: {str(subsys_e)}")
                    
                    # Method 3: Try using the content browser directly
                    unreal.log("\nüõ† Method 3: Using ContentBrowserSubsystem...")
                    try:
                        # Get the content browser module
                        content_browser = unreal.get_editor_subsystem(unreal.ContentBrowserSubsystem)
                        if content_browser:
                            # Create the destination path
                            destination_path = f"{folder_path}/{asset_name}"
                            unreal.log(f"  Attempting to import to: {destination_path}")
                            
                            # Try to import using the content browser
                            imported = False
                            
                            # Different UE versions have different methods
                            if hasattr(content_browser, 'import_assets_autosave'):
                                unreal.log("  Found import_assets_autosave method, attempting import...")
                                imported = content_browser.import_assets_autosave([source_file], folder_path)
                            elif hasattr(content_browser, 'import_asset_from_path'):
                                unreal.log("  Found import_asset_from_path method, attempting import...")
                                imported = content_browser.import_asset_from_path(source_file, folder_path)
                            else:
                                unreal.log_warning("  ‚ö†Ô∏è No suitable import method found in ContentBrowserSubsystem")
                            
                            if imported:
                                unreal.log("  ‚úÖ Successfully imported using content browser!")
                                total_success += 1
                                continue
                            else:
                                unreal.log_warning("  ‚ö†Ô∏è Content browser import returned False")
                        else:
                            unreal.log_warning("  ‚ö†Ô∏è Could not get content browser subsystem")
                    except Exception as cb_e:
                        unreal.log_warning(f"  ‚ö†Ô∏è Content browser import error: {str(cb_e)}")
                        
                    # If we get here, all methods failed
                    unreal.log_error(f"\n‚ùå All import methods failed for {asset_name}")
                    unreal.log_error(f"  This might be due to incompatibility with your UE version")
                    unreal.log_error(f"  Consider importing the FBX files manually through the Unreal Editor")
                    
                    total_processed += 1
            except Exception as e:
                unreal.log_error(f"‚ùå Problem during import process: {str(e)}")
                total_processed += 1
    
    # Show a summary of what we did
    unreal.log(f"\nüìä Import/Update Summary")
    unreal.log(f"  ‚Ä¢ Successfully processed: {total_success} of {total_processed} meshes")
    unreal.log(f"  ‚Ä¢ Success rate: {(total_success/max(1, total_processed))*100:.1f}%")
    
    if total_success < total_processed:
        unreal.log_warning(f"\n‚ö†Ô∏è Some imports didn't work. Check the log above for details.")
        unreal.log_warning(f"  You may need to import these files manually through the Unreal Editor.")
    else:
        unreal.log(f"\nüéâ All meshes were imported or updated successfully!")
        
    # Visual separator for the end of the script
    unreal.log("\n" + "-" * 80)
    return total_success


# ======================================================================
# Main Execution
# ======================================================================

# Run the function when this script is executed directly
if __name__ == "__main__":
    unreal.log("üöÄ Starting Static Mesh import process...")
    unreal.log("This is the seventh step in the Undini procedural generation pipeline.")
    unreal.log("It imports the sidewalks and roads FBX files generated by the Houdini script.")
    
    # You can modify these parameters for testing
    iteration_number = 0  # Change this as needed
    fbx_dir = None  # Use default directory
    
    # Call the main function
    result = reimport_folder_static_meshes(iteration_number=iteration_number, fbx_dir=fbx_dir)
    
    # Report the results
    if result > 0:
        unreal.log(f"\nüéâ Import process completed successfully with {result} meshes processed!")
    else:
        unreal.log_warning(f"\n‚ö†Ô∏è No meshes were imported. Check the log above for details.")